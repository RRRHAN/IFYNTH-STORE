import React, { useState, useEffect } from "react";
import {
  View,
  Alert,
  ScrollView,
  Image,
  TouchableOpacity,
  StyleSheet, // Tetap import StyleSheet jika Anda punya gaya kustom di sini
} from "react-native";
import ModalComponent from "../components/ModalComponent";
import { useColorScheme } from "@/hooks/useColorScheme";
import { pickImage } from "@/hooks/helpers/pickImage2";
// import { handleStockChange } from "@/hooks/helpers/handleStockChange"; // Tidak perlu lagi diimpor di sini
import styles from "./styles/addProductStyles"; // Pastikan path ini benar
import { addProduct } from "@/src/api/products";
import { ThemedText } from "@/components/ThemedText";
import { IconButton } from "react-native-paper";
import { useRouter } from "expo-router";
// import SizeInputItem from "@/components/products/SizeInputItem"; // Tidak perlu diimpor langsung
import ProductFormInputs from "@/components/products/ProductFormInput";
import ProductPickers from "@/components/products/ProductPickers";
import ActionButtons from "@/components/products/ActionButtons";
import SelectedImagesList from "@/components/products/SelectedImagesList";
import { useProductForm } from "@/hooks/helpers/useAddProductForm";
// import { ThemedTextInput } from "@/components/ThemedTextInput"; // Tidak perlu diimpor langsung
// import { Picker } from "@react-native-picker/picker"; // Tidak perlu diimpor langsung
import { ThemedView } from "@/components/ThemedView";

// Impor komponen baru
import ProductSizeManagement from "@/components/products/ProductSizeManagement";
import { handleStockChange } from "@/hooks/helpers/handleStockChange"; // Pastikan ini diimpor untuk diteruskan

// Impor FontAwesome
import { FontAwesome } from "@expo/vector-icons";

// Hapus type SizeOption dari sini karena sudah ada di ProductSizeManagement
// type SizeOption = "" | "tshirt" | "pants";

export default function AddProductScreen() {
  const router = useRouter();
  const {
    name,
    setName,
    description,
    setDescription,
    price,
    setPrice,
    capital,
    setCapital,
    weight,
    setWeight,
    department,
    setDepartment,
    category,
    setCategory,
    sizes,
    setSizes,
    images,
    setImages,
  } = useProductForm();
  const theme = useColorScheme();
  const isDark = theme === "dark";
  const [visible, setVisible] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");

  // newSizeName dan selectedSizeOption akan dikelola di ProductSizeManagement
  // const [newSizeName, setNewSizeName] = useState("");
  // const [selectedSizeOption, setSelectedSizeOption] = useState<SizeOption>("");

  const handleRemoveImage = (index: number) => {
    const updatedImages = images.filter((_, i) => i !== index);
    setImages(updatedImages);
  };

  // Fungsi-fungsi penambahan/penghapusan ukuran akan berada di ProductSizeManagement
  // const handleAddSize = () => { ... };
  // const handleRemoveSize = (indexToRemove: number) => { ... };

  // Efek samping untuk mengatur ukuran berdasarkan pilihan dropdown
  // Ini juga akan dipindahkan ke ProductSizeManagement
  // useEffect(() => { ... }, [selectedSizeOption]);

  const handleAddProduct = async () => {
    if (!name || !price || !description) {
      Alert.alert("Validation Error", "All fields are required.");
      return;
    }

    const stockDetails = sizes.filter((size) => size.stock > 0); // Hanya kirim ukuran dengan stok > 0

    if (stockDetails.length === 0) {
      Alert.alert(
        "Validation Error",
        "At least one size should have stock greater than 0."
      );
      return;
    }

    const productData = {
      name,
      description,
      price,
      capital,
      weight,
      department,
      category,
      sizes: stockDetails, // Kirim hanya yang ada stoknya
      images,
    };

    try {
      const result = await addProduct(productData);
      if (result.errors === null) {
        setSuccessMessage("Product added successfully.");
        setVisible(true);
        // Reset form setelah sukses
        setName("");
        setDescription("");
        setPrice("");
        setCapital("");
        setWeight("");
        setDepartment("");
        setCategory("");
        setSizes([]); // Reset ukuran ke array kosong untuk manual input
        setImages([]);
        // setSelectedSizeOption(""); // Ini akan ditangani oleh ProductSizeManagement
      } else {
        setErrorMessage(result.errors[0]);
        setVisible(true);
      }
    } catch (error) {
      setErrorMessage("Something went wrong");
      setVisible(true);
      console.error("Error adding product:", error);
    }
  };

  return (
    <ScrollView
      style={[styles.container, { backgroundColor: isDark ? "#000" : "#fff" }]}
      contentContainerStyle={{ paddingBottom: 30 }}
    >
      <ModalComponent
        visible={visible}
        hideModal={() => setVisible(false)}
        message={errorMessage || successMessage}
      />
      <IconButton
        icon={({ color, size }) => (
          <FontAwesome name="arrow-left" size={size} color={color} />
        )}
        size={30}
        onPress={() => router.replace("/products")}
        style={{
          top: 20,
        }}
      />
      <ThemedText style={[styles.title]}>Add Product</ThemedText>

      <ProductFormInputs
        name={name}
        setName={setName}
        description={description}
        setDescription={setDescription}
        price={price}
        setPrice={setPrice}
        weight={weight}
        setWeight={setWeight}
        capital={capital}
        setCapital={setCapital}
        isDark={isDark}
        styles={styles}
      />

      <ProductPickers
        department={department}
        setDepartment={setDepartment}
        category={category}
        setCategory={setCategory}
        isDark={isDark}
        styles={styles}
        isEditing={false}
      />

      {/* Menggunakan komponen baru untuk pengelolaan ukuran */}
      <ProductSizeManagement
        sizes={sizes}
        setSizes={setSizes}
        isDark={isDark}
        handleStockChange={handleStockChange}
        inputStyle={styles.input}
        titleStyle={styles.title}
      />

      <SelectedImagesList
        images={images}
        handleRemoveImage={handleRemoveImage}
        styles={styles}
      />

      <ActionButtons
        pickImage={() => {
          pickImage(setImages, setErrorMessage, setVisible);
        }}
        handleAddProduct={handleAddProduct}
        styles={styles}
      />
    </ScrollView>
  );
}
